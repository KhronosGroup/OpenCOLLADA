###############################################
# Input / Output files
###############################################
outputHeaderFileNamePublic = ../../OpenCOLLADA/COLLADASaxFrameworkLoader/include/generated14/COLLADASaxFWLColladaParserAutoGen14.h
outputHeaderFileNamePrivate = ../../OpenCOLLADA/COLLADASaxFrameworkLoader/include/generated14/COLLADASaxFWLColladaParserAutoGen14Private.h
outputSourceFileNamePrivate = ../../OpenCOLLADA/COLLADASaxFrameworkLoader/src/generated14/COLLADASaxFWLColladaParserAutoGen14Private.cpp
#outputHeaderFileNamePublic = /Temp/generated14/COLLADASaxFWLColladaParserAutoGen14.h
#outputHeaderFileNamePrivate = /Temp/generated14/COLLADASaxFWLColladaParserAutoGen14Private.h
#outputSourceFileNamePrivate = /Temp/generated14/COLLADASaxFWLColladaParserAutoGen14Private.cpp
outputExampleHeaderFileName = ../saxLoader/GeneratedSaxParser/include/ExampleParser.h
outputExampleSourceFileName = ../saxLoader/GeneratedSaxParser/src/ExampleParser.cpp
outputFPrintfHeaderFileName = ../saxLoader/GeneratedSaxParser/include/FPrintfParser.h
outputFPrintfSourceFileName = ../saxLoader/GeneratedSaxParser/src/FPrintfParser.cpp
outputCoherencyTestHeaderFileName = ../saxLoader/GeneratedSaxParser/include/CoherencyTestParser14.h
outputCoherencyTestSourceFileName = ../saxLoader/GeneratedSaxParser/src/CoherencyTestParser14.cpp

inputFile = collada_schema_1_4.xsd
#inputFile = collada_schema_1_5.xsd

rootElementName = COLLADA

namespace = COLLADASaxFWL14

classNamePrivate = ColladaParserAutoGen14Private
classNamePublic = ColladaParserAutoGen14

includePrecompiledHeader = COLLADASaxFWLStableHeaders.h

outFileHeader = /*\n\
\ \ \ \ Copyright (c) 2008-2013 NetAllied Systems GmbH\n\
\n\
\ \ \ \ This file is part of COLLADASaxFrameworkLoader.\n\
\n\
\ \ \ \ Licensed under the MIT Open Source License,\n\
\ \ \ \ for details please see LICENSE file or the website\n\
\ \ \ \ http://www.opensource.org/licenses/mit-license.php\n\
*/\n

###############################################
# referenced config files
###############################################
codeTemplates = code_templates.conf

###############################################
# float / double
###############################################
treatXsFloatAsCppFloat = true
treatXsDoubleAsCppDouble = false

###############################################
# FunctionMapFactory
###############################################
specialFunctionMapsStartElementNamesAllLevels = asset \
                                                scene \
                                                library_animation_clips \
                                                library_animations \
                                                library_cameras \
                                                library_controllers \
                                                library_effects \
                                                library_force_fields \
                                                library_geometries \
                                                library_images \
                                                library_lights \
                                                library_materials \
                                                library_nodes \
                                                library_physics_materials \
                                                library_physics_models \
                                                library_physics_scenes \
                                                library_visual_scenes

specialFunctionMapsStartElementNamesOneLevel = COLLADA

###############################################
# patterns
###############################################
pcreInitialNameCharacters = ([A-Z]|[_]|[a-z]|[:])
pcreNameCharacters = ([A-Z]|[_]|[a-z]|[:]|[-]|[.]|[0-9])
pcreInitialNameCharactersWithoutColon = ([A-Z]|[_]|[a-z])
pcreNameCharactersWithoutColon = ([A-Z]|[_]|[a-z]|[-]|[.]|[0-9])
pcreInitialNameCharactersWithoutColonAndDot = ([A-Z]|[_]|[a-z])

###############################################
# name mapping
###############################################
elementNameMapping = 
cppStructMemberNameMapping = operator = _operator; \
        float = _float; \
        typename = _typename; \
        int = _int; \
        bool = _bool; \
        enum = _enum; \
        inline = inline_; \
        class = _class; \
        struct = _struct; \
        return = _return; \
        true = _true; \
        false = _false; \
        union = _union; \
        in = _in; \
        fixed1 = _fixed1; \
        half4x4 = _half4x4; \
        and = _and; \
        or = _or; \
        xor = _xor; \
        not = _not; \
        case = _case;

generateTypeNameMapping = false
userTypeNameMapping = ENUM__AnonymousEnum0 = ENUM__mathml__overflow; \
                      ENUM__AnonymousEnum1 = ENUM__mathml__display; \
                      ENUM__AnonymousEnum2 = ENUM__mathml__cn__type; \
                      ENUM__AnonymousEnum3 = ENUM__mathml__list__order; \
                      ENUM__AnonymousEnum4 = ENUM__mathml__interval__closure; \
                      ENUM__AnonymousEnum5 = ENUM__mathml__declare__occurrence;

xsNamespaceMapping = http://www.w3.org/1998/Math/MathML = mathml; \
                     http://www.collada.org/2005/11/COLLADASchema = COLLADA; \
                     http://www.collada.org/2008/03/COLLADASchema = COLLADA;

###############################################
# example parser and fprintf parser options
###############################################
generateExampleParser = false
generateFprintfParser = false
generateCoherencyTestParser = false
exampleClassName = ExampleParser
exampleNamespace = example
fPrintfParserClassName = FprintfParser
fPrintfParserNamespace = GeneratedSaxParserTest

fprintfCtorParas = const char* outputFileName
fprintfParserFileMemberName = outFile
fprintfParserPrintDoubleMethodName = printDouble
fprintfParserPrintFloatMethodName = printFloat
fprintfParserPrintFloatTemplateMethodName = printFloatingPoint
fprintfParserPrintFloatMethodParameterName = value

coherencyTestParserClassName = CoherencyTestParser14
coherencyTestParserNamespace = SaxCoherencyTest
coherencyTestCtorParas = CoherencyTestErrorHandler* errorHandler
coherencyTestErrorHandlerName = mErrorHandler
coherencyTestIdCounterMapName = mIdCounterMap
coherencyTestCountAttributeMemberName = mCountAttribute
coherencyTestListCountMemberName = mListCount
coherencyTestInitializationList = mCountAttribute(0) \
                                  mErrorHandler(errorHandler) \
                                  mListCount(0)

###############################################
# general options
###############################################
builtInTypeMaxValues = sint8 = 127; \
        sint16 = 32767; \
        sint32 = 2147483647; \
        sint64 = 9223372036854775807; \
        uint8 = 255; \
        uint16 = 65535; \
        uint32 = 4294967295ULL; \
        uint64 = 18446744073709551615;

builtInTypeMinValues = sint8 = -128; \
        sint16 = -32768; \
        sint32 = -2147483647-1; \
        sint64 = -9223372036854775808; \
        uint8 = 0; \
        uint16 = 0; \
        uint32 = 0; \
        uint64 = 0;

includeFilesForEnumsHeader = GeneratedSaxParserTypes.h \
        GeneratedSaxParserUtils.h \
        GeneratedSaxParserParserError.h

includeFilesForEnumsSource = GeneratedSaxParserUtils.h

includeFilesForImpl = GeneratedSaxParserUtils.h

includeFilesForPrivateHeader = GeneratedSaxParserPrerequisites.h \
        GeneratedSaxParserTypes.h \
        GeneratedSaxParserParserTemplate.h \
        pcre.h

anonymousEnumPrefix = AnonymousEnum
anonymousUnionMemberPrefix = AnonymousUnionMember
anonymousUnionPrefix = AnonymousUnion
attributeDataParameterName = attributeData
attributePresentMaskType = static const uint32
attributesPresentMemberName = present_attributes
attributesPresentMemberType = uint32
attributeStructDefaultMemberName = DEFAULT
attributeStructSuffix = __AttributeData
baseClassNamespace = GeneratedSaxParser
baseClassTemplateName = ParserTemplate
beginMethodPrefix = begin__
classNameFunctionMapFactory = FunctionMapFactory
complexValidationDataParentStructVariableName = parentValidationData
complexValidationDataStateMachineStructMemberType = size_t
complexValidationDataStructVariableName = validationData
complexValidationStateMachineStructMember = validation_current_state
convenienceDataMethodLengthParameterName = length
convenienceDataMethodValueParameterName = value
cppEnumTypePrefix = ENUM__
cppUnionTypePrefix = UNION__
elementNameDelimiter = __
endMethodPrefix = end__
enumCountName = COUNT
enumFuncPrefixCharData = characterData2EnumData_
enumFuncPrefixDataEnd = dataEnumEnd_
enumFuncPrefixDataPrefix = toEnumDataPrefix_
enumFuncPrefixToEnum = toEnum_
enumMapNameSuffix = Map
enumMapPairType = std::pair
enumNotPresentName = NOT_PRESENT
enumTypeNameMappingFile = enum_names.txt
indentation = \ \ \ \ 
maxTemplateResolvingIterations = 50
outputAttributesFileSuffix = Attributes
outputEnumsFileSuffix = Enums
outputFindElementHashFileSuffix = FindElementHash
outputFunctionMapFactoryFileSuffix = FunctionMapFactory
outputFunctionMapFileSuffix = FunctionMap
outputNameMapFileSuffix = NameMap
outputValidationFileSuffix = Validation
outputSourceFileMethodDelimiter = //---------------------------------------------------------------------
outputValidationDataFileSuffix = ValidationData
publicImplMember = mImpl
simpleTypeDefaultCpp = const ParserChar*
simpleValidationFunctionLengthParameterName = length
simpleValidationFunctionLengthParameterType = size_t
simpleValidationFunctionPrefix = validate__
simpleValidationFunctionReturnType = ParserError::ErrorType
simpleValidationFunctionStreamEndSuffix = __streamEnd
simpleValidationFunctionStreamSuffix = __stream
simpleValidationFunctionValueParameterName = value
simpleValidationStreamCountStructMember = validationWholeSize
stringListItemValidationFunctionParameter = ParserString
typedAttributeDataVariableName = typedAttributeData
typeNameMappingSeparator = ,\ 
unionDataMemberName = union_data
unionFuncPrefixToUnion = toUnion_
unionFuncPrefixToUnionPrefix = toUnionPrefix_
unionInvalidTypeName = INVALID
unionMemberTypeConversionFunctionParameters = (const ParserChar**)&tmpBuf, (const ParserChar*)(buffer+length), failed
unionTypeMemberName = union_type
unknownAttributeType = const ParserChar*
unknownAttributesMemberType = GeneratedSaxParser::XSList<const ParserChar*>
unknownAttributesMemberName = unknownAttributes
unknownAttributesMemberInit = GeneratedSaxParser::XSList<const ParserChar*>()
validationDataStructMemberType = size_t
validationDataStructSuffix = __ValidationData
wildcardValidationDataStructName = _wildcard
xsNamespace = http://www.w3.org/2001/XMLSchema
